节点 是 Elasticsearch 运行的实例。集群 是一组有着同样cluster.name的节点，它们协同工作，互相分享数据，提供了故障转移和扩展的功能。
当然一个节点也可以是一个集群。

Elasticsearch的元素组成
关系数据库     ⇒ 数据库 ⇒ 表    ⇒ 行    ⇒ 列(Columns)
Elasticsearch  ⇒ 索引   ⇒ 类型  ⇒ 文档  ⇒ 字段(Fields)
一个 Elasticsearch 集群可以包含多个 索引（数据库），也就是说其中包含了很多 类型（表）。这些类型中包含了很多的 文档（行），
然后每个文档中又包含了很多的 字段（列）。
例如：

添加
为了创建员工名单，我们需要进行如下操作：
为每一个员工的 文档 创建索引，每个 文档 都包含了一个员工的所有信息。
每个文档都会被标记为 employee 类型。
这种类型将存活在 megacorp 这个 索引 中。
这个索引将会存储在 Elasticsearch 的集群中
在实际的操作中，这些操作是非常简单的（即使看起来有这么多步骤）。我们可以把如此之多的操作通过一个命令来完成：
PUT /megacorp/employee/1
{
    "first_name" : "John",
    "last_name" :  "Smith",
    "age" :        25,
    "about" :      "I love to go rock climbing",
    "interests": [ "sports", "music" ]
}
注意在 /megacorp/employee/1 路径下，包含了三个部分：
名字	内容
megacorp	索引的名字
employee	类型的名字
1	        当前员工的ID

查询
GET /megacorp/employee/1
返回的内容包含了这个文档的元数据信息，而 John Smith 的原始 JSON 文档也在 _source 字段中出现了：
{
  "_index" :   "megacorp",
  "_type" :    "employee",
  "_id" :      "1",
  "_version" : 1,
  "found" :    true,
  "_source" :  {
      "first_name" :  "John",
      "last_name" :   "Smith",
      "age" :         25,
      "about" :       "I love to go rock climbing",
      "interests":  [ "sports", "music" ]
  }
}


GET /megacorp/employee/_search                      搜索全部文档
curl 'http://xxx.xxx.xxx.xxx:9200/_search?q=type:enterprise-ng-log'   查询某个type下的全部文档
GET /megacorp/employee/_search?q=last_name:Smith    根据字段搜索文档
curl 'http://xxx.xxx.xxx.xxx:9200/logstash-yw-enterprise-2016-03-14(index)/_search?q=category:activity-user-getuserinfo&pretty'
查询index为logstash-yw-enterprise-2016-03-14下的字段category等于activity-user-getuserinfo的所有文档


删除索引
curl -XDELETE http://xxx.xxx.xx:9200/xxx-2016-03-25?pretty
正则删除匹配的索引：（删除logstash开头的3月份十几号的索引）
curl -XDELETE http://100.106.15.1:9200/logstash-*-2016-03-1*?pretty

删除30天前的索引
#!/bin/bash
now=`date +%Y%m%d`
echo $now
days_30_before=`date -d "$now 31 days ago" +%Y-%m-%d`
echo $days_30_before
echo "http://ip:9200/logstash-$days_30_before"
curl -XDELETE "http://ip:9200/logstash-$days_30_before" > /dev/null 2>&1


查看集群状态 
curl -XGET http://ip:9200/_cluster/health?pretty
查看所有的nodes节点
curl -XGET http://ip:9200/_cluster/state/nodes?pretty
查看所有的indices
curl -XGET http://100:9200/_cat/indices?v
查看ES的插件
curl -XGET http://100:9200/_nodes/plugin?pretty
查看ES下面的type
curl -XGET http://100:9200/_search?pretty
查看ES下面的type的数据
curl 'http://100:9200/_search?q=_type:activity&pretty'
查看ES的mapping
curl -XGET 'http://100:9200/logstash-2016-03-11/_mapping?pretty'
插入数据 
curl -XPUT http://192:9200/blog/article/1?pretty -d '{"field1":1024}'  其中的blog为indexer   1为 ID -d 为send data
查询某个索引下某个字段的值
curl 'http://localhost:9200/_search?q=type:faceverify&q=userid:525779654234918904&pretty'


安装：
见elastcisearch_install.sh
测试：
curl 'http://localhost:9200/?pretty'
curl -i -X GET 'http://localhost:9200/_count?pretty' 



-------------------------------------------------------------------------------------------------------------------------
repository:

注册repository：
curl -XPUT 'http://localhost:9200/_snapshot/my_backup' -d '{
  "type": "fs",
  "settings": {
    "location": "/mount/backups/my_backup",
    "compress": true
  }
}'

查看repository：
curl -XGET http://ip:9200/_snapshot/my_backup?pretty   查看my_backup这个repository
curl -XGET http://ip:9200/_snapshot/repo*,*backup*?pretty   通过正则查看，以repo开头和包含backup的repository
curl -XGET http://ip:9200/_snapshot/_all 或 curl -XGET http://ip:9200/_snapshot 查看所有repository

验证repository：
curl -XGET http://ip:9200/_snapshot/my_backup/_verify

删除repository：
curl -XDELETE http://ip:9200/_snapshot/my_backup


snapshot:
a snapshot represents the point-in-time view of the index at the moment when snapshot was created
创建snapshot时，线上操作仍可用
 
创建backup（snapshot）：
curl -XPUT "localhost:9200/_snapshot/my_backup(repository下)/snapshot_1（快照1）?wait_for_completion=true"
这个命令有load into memory操作，等待返回结果会有些慢

指定indices创建snapshot：
curl -XPUT 'http://localhost:9200/_snapshot/my_backup/snapshot_1' -d 
'{
  "indices": "index_1,index_2",
  "ignore_unavailable": "true",
  "include_global_state": false
}'

查看snapshot：
curl -XGET http://ip:9200/_snapshot/my_backup/snapshot_1?pretty
The command fails if some of the snapshots are unavailable. 
The boolean parameter ignore_unvailable can be used to return all snapshots that are currently available.
其他查看方式api与查看repository相同

撤销正在running的snapshot：
curl -XGET "localhost:9200/_snapshot/my_backup/_current"

删除snapshot：
curl -XDELETE http://ip:9200/_snapshot/my_backup/snapshot_1
（取消backup操作）delete snapshot operation can be used to cancel long running snapshot operations that were started by mistake.

还原snapshot：
curl -XPOST "localhost:9200/_snapshot/my_backup/snapshot_1/_restore?wait_for_completion=true"
By default, all indices in the snapshot as well as cluster state are restored

自定义还原：
curl -XPOST "localhost:9200/_snapshot/my_backup/snapshot_1/_restore" -d
'{
  "indices": "index_1,index_2",
  "ignore_unavailable": "true",
  "include_global_state": false,
  "rename_pattern": "index_(.+)",
  "rename_replacement": "restored_index_$1"
}'

Changing index settings during restore
https://www.elastic.co/guide/en/elasticsearch/reference/2.2/modules-snapshots.html#_changing_index_settings_during_restore

Restoring to a different cluster is supported
https://www.elastic.co/guide/en/elasticsearch/reference/2.2/modules-snapshots.html#_restoring_to_a_different_cluster

查看snapshot状态：
GET /_snapshot/_status
GET /_snapshot/my_backup/_status
GET /_snapshot/my_backup/snapshot_1/_status
GET /_snapshot/my_backup/snapshot_1,snapshot_2/_status

取消restore操作：
any currently running restore operation can be canceled by deleting indices that are being restored


snapshot hdfs:
http://kibana.logstash.es/content/elasticsearch/snapshot.html
https://github.com/elastic/elasticsearch-hadoop/tree/master/repository-hdfs
http://bigbo.github.io/pages/2015/02/28/elasticsearch_hadoop/


-----------------------------------------------------------------------------------------------
plugin

rpm -ql xxx       find where is the bin/plugin

plugin install:

core plugin
bin/plugin install analysis-icu(plugin name)

community_and_non_core_plugins
bin/plugin install [org]/[user|component]/[version]
https://www.elastic.co/guide/en/elasticsearch/plugins/2.2/installation.html#_community_and_non_core_plugins
