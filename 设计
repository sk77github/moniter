
（1）低侵入性——作为非业务组件，应当尽可能少侵入或者无侵入其他业务系统，对于使用方透明，减少开发人员的负担；
（2）灵活的应用策略——可以（最好随时）决定所收集数据的范围和粒度；
（3）时效性——从数据的收集和产生，到数据计算和处理，再到最终展现，都要求尽可能快；
（4）决策支持——这些数据是否能在决策支持层面发挥作用，特别是从 DevOps 的角度；
（5）可视化才是王道。



如果基于log来做，因为log要落地，打太多log，影响应用。
如果直接走udp给statsd呢？
statsd做为agent装在客户机上，客户机程序把metric打到本机statsd监听的端口上，statsd在转发给监控系统（只涉及内存和网络，不落盘）

关于监控数据的收集：
推模式：业务代码，或其他代码，将数据点推给监控系统
拉模式，监控系统的一部分，去拉取数据（比如日志，比如从数据库拉取），取监听某个端口，某个文件，某个对象的状态（比如长度，时间等）

监控系统：
收集数据（agent：logstash）
存储数据（graphite，es）
显示数据（grafana，kibana）
数据触发（seyren）

相关资源：
http://www.infoq.com/cn/presentations/public-comments-monitoring-platform-analyse/
