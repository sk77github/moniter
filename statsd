A network daemon that runs on the Node.js platform and listens for statistics（这个单词是重点）, 
like counters and timers,
sent over UDP or TCP and sends aggregates（这是重点） to one or more pluggable backend services (e.g., Graphite).
两个重点单词，指出了它干什么事。

------------------------------------------------------------------------------------------------------
安装

yum install nodejs  
（?centos的一些版本没有源
yum install epel-release 
ls -lah /etc/yum.repos.d/
(？rpm -e epel-release
如果ls -lah /etc/yum.repos.d/找不到epel源，说明之前有安装脏
需要rpm -e epel-release
再yum install epel-release
）
yum install nodejs 
yum install npm --enablerepo=epel
）


二进制安装：https://nodejs.org/dist/v4.2.4/node-v4.2.4-linux-x64.tar.xz  二进制版本
安装statsd
git clone https://github.com/etsy/statsd.git
cd statsd
Create a config file from exampleConfig.js and put it somewhere
Start the Daemon:
node stats.js /path/to/config

将statsd做成服务：
//vim start
vim /etc/init.d/statsd   
#!/bin/bash
#
# StatsD
#
# chkconfig: 3 50 50
# description: StatsD init.d
. /etc/rc.d/init.d/functions

prog=statsd
STATSDDIR=/data/statsd
statsd=./stats.js
LOG=/var/log/statsd.log
ERRLOG=/var/log/statsderr.log
CONFFILE=${STATSDDIR}/localConfig.js
pidfile=/var/run/statsd.pid
lockfile=/var/lock/subsys/statsd
RETVAL=0
STOP_TIMEOUT=${STOP_TIMEOUT-10}

start() {
    echo -n $"Starting $prog: "
    cd ${STATSDDIR}

    # See if it's already running. Look *only* at the pid file.
    if [ -f ${pidfile} ]; then
        failure "PID file exists for statsd"
        RETVAL=1
    else
        # Run as process
        node ${statsd} ${CONFFILE} >> ${LOG} 2>> ${ERRLOG} &
        RETVAL=$?

        # Store PID
        echo $! > ${pidfile}

        # Success
        [ $RETVAL = 0 ] && success "statsd started"
    fi

    echo
    return $RETVAL
}
stop() {
    echo -n $"Stopping $prog: "
    killproc -p ${pidfile}
    RETVAL=$?
    echo
    [ $RETVAL = 0 ] && rm -f ${pidfile}
}

# See how we were called.
case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  status)
    status -p ${pidfile} ${prog}
    RETVAL=$?
    ;;
  restart)
    stop
    start
    ;;
  condrestart)
    if [ -f ${pidfile} ] ; then
        stop
        start
    fi
    ;;
  *)
    echo $"Usage: $prog {start|stop|restart|condrestart|status}"
    exit 1
esac

exit $RETVAL
//vim end
chmod 0755 /etc/init.d/statsd
chkconfig --add statsd

--------------------------------------------------------------------------------------------------------------------------
使用

logstash中的statsd输出配置：
output {
  statsd {
    host => "192.168.1.14"
    port => 8125
    namespace => "logstash"
    timing => [ "nginx.response.elapse", "%{upstream_time}" ]
    increment => "nginx.response.number"
    count => [ "nginx.response.bytes", "%{bytes}" ]
  }
}


statsd 查看：
echo "counters" | nc 127.0.0.1 8126 

statsd打点：
<metricname>:<value>|<type>
type分c(counting),ms(timing),g(gauge),s(sets)四种类型

Counting:
<metricname>:1|c            这样的counting也可以叫increment，对应logstash statsd output插件的 increment
<metricname>:-1|c           这样的counting也可以叫decrement，对应logstash statsd output插件的 decrement
<metricname>:大于1的数|c    这样的counting也可以叫count，对应logstash statsd output插件的count

Timing
<metricname>:<value>|ms     对应logstash statsd output插件的timing

Gauges
<metricname>:<value>|g      对应logstash statsd output插件的gauge

Sets
<metricname>:<value>|s      对应logstash statsd output插件的set

例如：
echo "foo:1|c" | nc -u -w0 127.0.0.1 8125
 
对比graphite打点看：
<key> <value> <timestamp>
echo "foo 1 timestamp" | nc 127.0.0.1 2003

此外statsd打点有个采样率的概念：
通过 sample_rate 参数来设置采样率。假设 sample_rate=0.1：
在采集周期 30 s 内，只采集 10% 的数据。也就是说，调用了 10 次 increment，只自增了一次 Metric。
在数据量较大的情况下，可以确保采样的高效。

metric类型参考：
http://blog.csdn.net/cnweike/article/details/30250483
https://blog.pkhamre.com/understanding-statsd-and-graphite/
---------------------------------------------------------------------------------------------------------------------------- 
概念
 
三个水平的度量：
网络，机器（操作系统级，硬件），应用代码，第三方API



Counting: 
If you have the default flush interval, 10 seconds, and send StatsD 7 increments on a counter with the flush interval,
the counter would be 7 and the per-second value would be 0.7. No magic.


理解statsd的flush interval：
default 10s，在这个flush interval下的per secondvalue。for example：
If you have the default flush interval, 10 seconds, and send StatsD 7 increments on a counter with the flush interval,
the counter would be 7 and the per-second value would be 0.7. No magic.



